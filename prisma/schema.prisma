// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator zod {
//     provider                  = "zod-prisma-types"
//     output                    = "./generated/zod"
//     createRelationValuesTypes = true
//     useMultipleFiles          = true
//     // relationModel         = true
//     // modelCase             = "PascalCase"
//     // modelSuffix           = "Model"
//     // useDecimalJs          = true
//     // prismaJsonNullability = true
// }

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// model Example {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

model Account {
    id                 String  @id @default(cuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String? @db.Text
    access_token       String? @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? @db.Text
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String    @unique
//     emailVerified DateTime?
//     cart          Cart[]    @relation("UserCart")
//     address       String?
//     wishlist      Product[] @relation("UserWishlist", references: [id])
//     // wishlist      Product[] @relation("UserWishlist")
//     image         String?
//     role          Role      @default(USER)
//     accounts      Account[]
//     sessions      Session[]
//     ratings       Rating[]
//     // rating???
//     createdAt     DateTime  @default(now())
//     updatedAt     DateTime  @updatedAt()
// }

// model Cart {
//     id                 String          @id @default(cuid())
//     products           ProductInCart[]
//     cartTotal          Float?
//     totalAfterDiscount Float?
//     orderedBy          User?           @relation(fields: [orderedById], references: [id])
//     // orderedBy          User?
//     orderedById        String?
//     createdAt          DateTime        @default(now())
//     updatedAt          DateTime        @updatedAt()
// }

// model ProductInCart {
//     id        String   @id @default(cuid())
//     product   Product? @relation(fields: [productId], references: [id])
//     // product Product? @relation("ProductInCart", fields: [productId])
//     productId String?
//     count     Int?
//     color     String?
//     price     Float?
//     cart      Cart?    @relation(fields: [cartId], references: [id])
//     cartId    String?
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt()
// }

// enum Role {
//     USER
//     ADMIN
// }

// model Category {
//     id      String   @id @default(cuid())
//     name    String
//     slug    String   @unique
//     // subcategory SubCategory?
//     // product     Product?
//     created DateTime @default(now())
//     updated DateTime @updatedAt
// }

// model SubCategory {
//     id         String   @id @default(cuid())
//     name       String
//     slug       String   @unique
//     category   Category @relation(fields: [categoryId], references: [id])
//     // category Category @relation("SubCategoryParent", fields: [categoryId])
//     categoryId String   @unique
//     // categoryId String
//     created    DateTime @default(now())
//     updated    DateTime @updatedAt
//     // product    Product[]
// }

// model Product {
//     id            String       @id @default(cuid())
//     title         String
//     slug          String       @unique
//     description   String
//     price         Float
//     category      Category?    @relation(fields: [categoryId], references: [id])
//     // category    Category?
//     categoryId    String?      @unique
//     subcategory   SubCategory? @relation(fields: [subcategoryId], references: [id])
//     // subcategories SubCategory[] @relation("SubCategoryProduct")
//     subcategoryId String?
//     quantity      Int
//     sold          Int          @default(0)
//     images        Image[]
//     // images        String[]
//     shipping      Shipping
//     color         Color
//     brand         Brand
//     ratings       Rating[]
//     // ratings       Rating[]      @relation("ProductRating")
//     created       DateTime     @default(now())
//     updated       DateTime     @updatedAt

//     @@index([subcategoryId])
// }

// model Image {
//     id        String   @id @default(uuid())
//     image     String
//     product   Product  @relation(fields: [productId], references: [id])
//     productId String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     @@index([productId])
// }

// model Rating {
//     id        String   @id @default(cuid())
//     star      Int
//     postedBy  User?    @relation(fields: [userId], references: [id])
//     // postedBy  User?
//     userId    String?
//     product   Product? @relation(fields: [productId], references: [id])
//     // product   Product? @relation("ProductRating", fields: [productId])
//     productId String?
//     created   DateTime @default(now())
//     updated   DateTime @updatedAt

//     @@index([userId])
//     @@index([productId])
// }

// enum Shipping {
//     Yes
//     No
// }

// enum Color {
//     Black
//     Brown
//     Silver
//     White
//     Blue
// }

// enum Brand {
//     Apple
//     Samsung
//     Microsoft
//     Lenovo
//     ASUS
// }

// model Coupon {
//     id        String   @id @default(cuid())
//     name      String   @unique
//     expiry    DateTime
//     discount  Float
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// model Order {
//     id            String           @id @default(cuid())
//     products      ProductInOrder[]
//     paymentIntent Json?
//     orderStatus   String?
//     orderedBy     User?
//     createdAt     DateTime         @default(now())
//     updatedAt     DateTime         @updatedAt
// }

// model ProductInOrder {
//     id      String   @id @default(cuid())
//     product Product? @relation("ProductInOrder", fields: [productId])
//     //   product          Product?      @relation(fields: [productId], references: [id])
//     //   productId        String

//     count   Int
//     color   String?
//     order   Order   @relation(fields: [orderId], references: [id])
//     orderId String
// }

// model ProductInOrder {
//   id               String        @id @default(uuid())
//   order            Order?        @relation(fields: [orderId], references: [id])
//   orderId          String
//   product          Product?      @relation(fields: [productId], references: [id])
//   productId        String
//   quantity         Int
// }

////////////////////////////////////////////////////////////////

// Prisma models
