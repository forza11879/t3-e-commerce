// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator zod {
//     provider                  = "zod-prisma-types"
//     output                    = "./generated/zod"
//     createRelationValuesTypes = true
//     useMultipleFiles          = true
//     // relationModel         = true
//     // modelCase             = "PascalCase"
//     // modelSuffix           = "Model"
//     // useDecimalJs          = true
//     // prismaJsonNullability = true
// }

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// model Example {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

model Account {
    id                 String  @id @default(cuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String? @db.Text
    access_token       String? @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? @db.Text
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// User and Cart have a one-to-one relationship, where each Cart is associated with a single User. This is indicated by the orderedBy field in the CartSchema, which references the User model
// User and Product have a many-to-many relationship, where each User can have multiple Products in their wishlist and each Product can be in multiple users' wishlists. This is indicated by the wishlist field in the UserSchema, which is an array of references to the Product model.
model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    cart          Cart?
    address       String?
    wishlist      Product[]
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    ratings       Rating[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt()
}

// User and Cart have a one-to-one relationship, where each Cart is associated with a single User. This is indicated by the orderedBy field in the CartSchema, which references the User model
// Product and Cart have a many-to-many relationship, where each Product can be in multiple Carts and each Cart can have multiple Products. This is indicated by the products field in the CartSchema, which is an array of objects that include a reference to the Product model.
model Cart {
    id                 String    @id @default(cuid())
    products           Product[]
    cartTotal          Float?
    totalAfterDiscount Float?
    orderedBy          User?     @relation(fields: [userId], references: [id])
    userId             String    @unique
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
}

// Category and Product have a one-to-many relationship, where each Category can have multiple Products. This is indicated by the category field in the ProductSchema, which references the Category model.

model Category {
    id            String        @id @default(cuid())
    name          String
    slug          String        @unique
    products      Product[]
    subcategories SubCategory[]
    createdAt     DateTime      @default(now())
    updatedAt     DateTime?     @updatedAt
}

// User and Product have a many-to-many relationship, where each User can have multiple Products in their wishlist and each Product can be in multiple users' wishlists. This is indicated by the wishlist field in the UserSchema, which is an array of references to the Product model.
model Product {
    id            String        @id @default(cuid())
    title         String
    slug          String        @unique
    description   String
    price         Float
    quantity      Int
    sold          Int           @default(0)
    shipping      Shipping
    color         Color
    brand         Brand
    category      Category      @relation(fields: [categoryId], references: [id])
    categoryId    String
    subcategories SubCategory[]
    carts         Cart[]
    users         User[]
    images        Image[]
    ratings       Rating[]
    createdAt     DateTime      @default(now())
    updatedAt     DateTime?     @updatedAt

    @@index([categoryId])
}

// SubCategory and Product have a many-to-many relationship, where each Product can belong to multiple SubCategorys and each SubCategory can have multiple Products. This is indicated by the subcategories field in the ProductSchema, which is an array of references to the SubCategory model.
model SubCategory {
    id         String    @id @default(cuid())
    name       String
    slug       String    @unique
    category   Category  @relation(fields: [categoryId], references: [id])
    categoryId String
    products   Product[]
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    @@index([categoryId])
}

enum Role {
    USER
    ADMIN
}

model Image {
    id        String   @id @default(uuid())
    image     String
    product   Product  @relation(fields: [productId], references: [id])
    productId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId])
}

model Rating {
    id        String   @id @default(cuid())
    star      Int
    postedBy  User?    @relation(fields: [userId], references: [id])
    userId    String?
    product   Product? @relation(fields: [productId], references: [id])
    productId String?
    created   DateTime @default(now())
    updated   DateTime @updatedAt

    @@index([userId])
    @@index([productId])
}

enum Shipping {
    Yes
    No
}

enum Color {
    Black
    Brown
    Silver
    White
    Blue
}

enum Brand {
    Apple
    Samsung
    Microsoft
    Lenovo
    ASUS
}
