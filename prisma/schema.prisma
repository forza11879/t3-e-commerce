// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator zod {
//     provider                  = "zod-prisma-types"
//     output                    = "./generated/zod"
//     createRelationValuesTypes = true
//     useMultipleFiles          = true
//     // relationModel         = true
//     // modelCase             = "PascalCase"
//     // modelSuffix           = "Model"
//     // useDecimalJs          = true
//     // prismaJsonNullability = true
// }

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                 String  @id @default(cuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String? @db.Text
    access_token       String? @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? @db.Text
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    rating        Rating[]
}

enum Role {
    USER
    ADMIN
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id          String        @id @default(cuid())
    name        String
    slug        String        @unique
    SubCategory SubCategory[]
    Product     Product[]
    created     DateTime      @default(now())
    updated     DateTime      @updatedAt
}

model SubCategory {
    id        String   @id @default(cuid())
    name      String
    slug      String   @unique
    parent    Category @relation(fields: [parentId], references: [id])
    parentId  String
    created   DateTime @default(now())
    updated   DateTime @updatedAt
    Product   Product? @relation(fields: [productId], references: [id])
    productId String?

    @@index([parentId])
    @@index([productId])
}

model Product {
    id            String        @id @default(cuid())
    title         String
    slug          String        @unique
    description   String
    price         Float
    category      Category?     @relation(fields: [categoryId], references: [id])
    categoryId    String?
    subcategories SubCategory[] @relation(references: [id])
    quantity      Int
    sold          Int           @default(0)
    images        Image[]
    shipping      Shipping
    color         Color
    brand         Brand
    ratings       Rating[]      @relation(references: [id])
    created       DateTime      @default(now())
    updated       DateTime      @updatedAt

    @@index([categoryId])
}

model Image {
    id        String   @id @default(uuid())
    image     String
    product   Product  @relation(fields: [productId], references: [id])
    productId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId])
}

model Rating {
    id        String   @id @default(cuid())
    star      Int
    postedBy  User?    @relation(fields: [userId], references: [id])
    userId    String?
    product   Product? @relation(fields: [productId], references: [id])
    productId String?
    created   DateTime @default(now())
    updated   DateTime @updatedAt
}

enum Shipping {
    Yes
    No
}

enum Color {
    Black
    Brown
    Silver
    White
    Blue
}

enum Brand {
    Apple
    Samsung
    Microsoft
    Lenovo
    ASUS
}
